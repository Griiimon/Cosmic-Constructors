use G, in addition to F, to trigger alternative default action on block.. pistons and rotors: active toggle

rocket projectile thruster flicker 

add terrain class to nodes with get_gravity_vector() + gravity area

when splitting static grid recalculate for each part if still/newly static
	run ground check for each block, or store "anchored" state in GridBlock
	..or even better in grid via dictionary so GridBlock doesnt get bloated

nice skybox

sub grid loading and attaching to pistons/rotor

fixed gatling

debug hitpoint bars for each block

damage impact impulse
	applies force at the impact position
	if explosion trigger the explosion Area detection plus explosion force deferred, so game has time to potentially split grids

BlockPlacementsConditions

BlockInstance on_update() for rotor/piston !?

"F" (hold) click block 
	holding F will trigger UI overlay displaying target blocks default action

build ghost: just make all materials white, no transparency and remove any texture 
	( half transparent shader + texture only solution )

Alt fps look around while fixed

grid angular dampeners

save player only in cryo pod, otherwise use default spawn points or medbay

FIX getting stuck in terrain when going EVA ( will intersect_shape work against terrain? because Area didnt seem to => JOLT OPT-IN )
FIX inital grid align when sloped/diagonal initial normal
FIX sometimes wrong ( downwards ) momentum when strafing off grid 
FIX shouldnt all blocks face forward by default ( piston and rotor are facing up rn )
FIX projectile initial position from viewport pos
FIX removing MultiBlocks can lead to crash ( only when splitting grids? )

meta tag for BlockInstance scene sub nodes that should be deleted in ghost ( or just delete anything not MeshInstance3D or plain Node3D ? )

what about block grids inertia??


NEW MECHANICS
-----------------

Laser Guns
Player Equipment grid like factorio, with shields etc
backpack vs bottles

science, progression unlocking and improving block properties
basic/intermediate/advanced/expert/master sciene levels/recipes

moving celestial bodies by putting each in its own world3d

cars: use roguecar components, like engine blocks, steering/brake blocks etc. maybe even do aerodynamic calculations

4 suspension limit game settings: 
	- check all suspension limits and set a global var on the grid (?)
		to cancel out local y velocity with an impulse

	- no travel limit
	- static body limiting
	- suspension block or wheel breaks immediately
	- high exponential counter force/impulse ( depending on grid mass )
