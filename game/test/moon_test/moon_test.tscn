[gd_scene load_steps=9 format=3 uid="uid://rvroy1e0byrg"]

[ext_resource type="Texture2D" uid="uid://myq0vhmv3kjp" path="res://game/textures/Rocks07_col.webp" id="1_clqh5"]
[ext_resource type="Texture2D" uid="uid://igu5bkxtjxmy" path="res://game/textures/Rocks07_nrm.webp" id="2_nkmnv"]

[sub_resource type="FastNoise2" id="FastNoise2_q1pol"]
period = 52.0001
fractal_octaves = 2
cellular_distance_function = 3
cellular_jitter = 0.43
remap_output_min = 0.8

[sub_resource type="FastNoise2" id="FastNoise2_5isg2"]
period = 536.1

[sub_resource type="VoxelGeneratorGraph" id="VoxelGeneratorGraph_hxnsk"]
graph_data = {
"connections": [[9, 0, 13, 0], [1, 0, 12, 0], [1, 0, 23, 0], [2, 0, 12, 1], [2, 0, 23, 1], [3, 0, 12, 2], [3, 0, 23, 2], [12, 0, 20, 0], [13, 0, 4, 0], [14, 0, 17, 0], [17, 0, 13, 1], [20, 0, 14, 0]],
"nodes": {
"1": {
"gui_position": Vector2(240, 53.3333),
"type": "InputX"
},
"12": {
"auto_connect": true,
"gui_position": Vector2(400, 160),
"noise": SubResource("FastNoise2_q1pol"),
"type": "FastNoise2_3D"
},
"13": {
"gui_position": Vector2(880, 0),
"type": "Add"
},
"14": {
"b": 500.0,
"gui_position": Vector2(880, 160),
"type": "Multiply"
},
"17": {
"gui_position": Vector2(1093.33, 213.333),
"type": "Sqrt"
},
"2": {
"gui_position": Vector2(240, 160),
"type": "InputY"
},
"20": {
"b": 0.5,
"gui_position": Vector2(613.333, 186.667),
"type": "Max"
},
"23": {
"auto_connect": true,
"gui_position": Vector2(373.333, 426.667),
"noise": SubResource("FastNoise2_5isg2"),
"type": "FastNoise2_3D"
},
"3": {
"gui_position": Vector2(240, 240),
"type": "InputZ"
},
"4": {
"auto_connect": true,
"gui_position": Vector2(1040, 26.6667),
"type": "OutputSDF"
},
"9": {
"auto_connect": true,
"gui_position": Vector2(586.667, -80),
"radius": 500.0,
"type": "SdfSphere",
"x": 0.0,
"y": 0.0,
"z": 0.0
}
},
"version": 2
}

[sub_resource type="VoxelMesherTransvoxel" id="VoxelMesherTransvoxel_u8xhy"]

[sub_resource type="Shader" id="Shader_agr3e"]
code = "shader_type spatial;

#include \"res://addons/zylann.voxel/shaders/transvoxel.gdshaderinc\"
#include \"res://addons/zylann.voxel/shaders/lod_fade.gdshaderinc\"
#include \"res://addons/zylann.voxel/shaders/virtual_texturing.gdshaderinc\"

uniform sampler2D u_top_albedo_texture : source_color;
uniform sampler2D u_top_normal_texture;
uniform sampler2D u_side_albedo_texture : source_color;
uniform sampler2D u_side_normal_texture;
uniform sampler2D u_global_normalmap;// : hint_normal;
uniform float u_mountain_height;
uniform vec3 u_top_modulate : source_color = vec3(1.0);

// From Voxel Tools API
// TODO Switch to instance uniforms when they work, see Godot issue #54897
// instance uniform vec3 u_block_local_position = vec3(0.0);
// instance uniform vec2 u_lod_fade = vec2(0.0);
uniform mat4 u_block_local_transform;

varying vec3 v_up_planet;
//varying vec3 v_planet_normal;
varying float v_planet_height;
varying vec3 v_triplanar_uv;
//varying vec3 v_triplanar_power_normal;
varying float v_camera_distance;
varying vec3 v_normal_model;

varying vec3 v_vertex_pos_model;

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

// float skew3(float x) {
// 	return (x * x * x + x) * 0.5;
// }

// vec2 get_sphere_uv(vec3 npos) {
// 	vec2 uv = vec2(
// 		-(atan(npos.z, npos.x) / TAU) + 0.5,
// 		-0.5 * skew3(npos.y) + 0.5
// 	);
// 	return uv;
// }

// float pow8(float x) {
// 	return x*x*x*x * x*x*x*x;
// }

void vertex() {
	VERTEX = get_transvoxel_position(VERTEX, CUSTOM0);
	v_vertex_pos_model = VERTEX;

	// Note, this transform does not contain any scale or rotation...
	// See `voxel_mesh_block_vlt.cpp`
	mat4 planet_transform = u_block_local_transform;
	vec3 local_pos = (planet_transform * vec4(VERTEX, 1.0)).xyz;
	//vec3 local_pos = VERTEX + u_block_local_position;

	v_up_planet = normalize(local_pos);
	v_normal_model = NORMAL;
	v_planet_height = length(local_pos);
	v_triplanar_uv = local_pos * 0.05;

	vec3 wpos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	vec3 cam_pos = (INV_VIEW_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	v_camera_distance = distance(wpos, cam_pos);

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(NORMAL.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0, -1.0, 0.0) * abs(NORMAL.x);
	BINORMAL += vec3(0.0, 0.0, 1.0) * abs(NORMAL.y);
	BINORMAL += vec3(0.0, -1.0, 0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
}

void fragment() {
	vec3 normal_model;
	vec3 normal_view = get_voxel_normal_view_model(v_vertex_pos_model,
		NORMAL, VIEW_MATRIX * MODEL_MATRIX,
		v_normal_model, normal_model);
	normal_model = normalize(normal_model);

	//vec3 normal = normalize(v_planet_normal);
	float flatness = max(dot(normal_model, v_up_planet), 0.0);
	float topness = smoothstep(0.85, 1.0, flatness);

	float mountain_height = u_mountain_height;
	float mountain_smoothness = 3.0;
	float mountain_factor = smoothstep(
		mountain_height - mountain_smoothness,
		mountain_height + mountain_smoothness, v_planet_height);
	topness = mix(topness, 0.0, mountain_factor);

	float triplanar_blend_sharpness = 8.0;
	vec3 triplanar_power_normal = pow(abs(normal_model), vec3(triplanar_blend_sharpness));
	triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));

	vec3 top_col = triplanar_texture(
		u_top_albedo_texture, triplanar_power_normal, v_triplanar_uv * 2.0).rgb * u_top_modulate;
	vec3 top_norm = triplanar_texture(
		u_top_normal_texture, triplanar_power_normal, v_triplanar_uv * 2.0).rgb;

	vec3 side_col = triplanar_texture(
		u_side_albedo_texture, triplanar_power_normal, v_triplanar_uv).rgb;
	vec3 side_norm = triplanar_texture(
		u_side_normal_texture, triplanar_power_normal, v_triplanar_uv).rgb;

	// Far texturing
	float far_min_distance = 100.0;
	float far_max_distance = 200.0;
	float far_uv_multiplier = 0.25;
	float far_factor =
		clamp((v_camera_distance - far_min_distance) / (far_max_distance - far_min_distance), 0.0, 1.0);
	vec3 far_side_col = triplanar_texture(
		u_side_albedo_texture, triplanar_power_normal, v_triplanar_uv * far_uv_multiplier).rgb;
	vec3 far_side_norm = triplanar_texture(
		u_side_normal_texture, triplanar_power_normal, v_triplanar_uv * far_uv_multiplier).rgb;
	side_col = mix(side_col, far_side_col, far_factor);
	side_norm = mix(side_norm, far_side_norm, far_factor);

	ALBEDO = mix(side_col, top_col, topness);
	NORMAL_MAP = mix(side_norm, top_norm, topness);
	NORMAL = normal_view;
	//ALBEDO = vec3(normal_model);

	// Debug virtual texture fallbacks
	/*if(u_voxel_virtual_texture_offset_scale.w < 0.51) {
		ALBEDO = vec3(1.0, 0.0, 0.0);
	}
	if(u_voxel_virtual_texture_offset_scale.w < 0.251) {
		ALBEDO = vec3(1.0, 0.5, 0.0);
	}
	if(u_voxel_virtual_texture_offset_scale.w < 0.1251) {
		ALBEDO = vec3(1.0, 1.0, 0.0);
	}
	if(u_voxel_virtual_texture_offset_scale.w < 0.06251) {
		ALBEDO = vec3(0.0, 1.0, 0.0);
	}
	if(u_voxel_virtual_texture_offset_scale.w == 0.0) {
		ALBEDO = vec3(1.0, 0.0, 1.0);
	}*/

	// Discard has to be last to workaround https://github.com/godotengine/godot/issues/34966
	if (get_lod_fade_discard(SCREEN_UV)) {
		discard;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8boqs"]
render_priority = 0
shader = SubResource("Shader_agr3e")
shader_parameter/u_transition_mask = null
shader_parameter/u_lod_fade = null
shader_parameter/u_voxel_virtual_texture_tile_size = 0
shader_parameter/u_voxel_virtual_texture_fade = null
shader_parameter/u_voxel_cell_size = 0.0
shader_parameter/u_voxel_block_size = 0
shader_parameter/u_voxel_virtual_texture_offset_scale = Vector4(1, 0, 0, 0)
shader_parameter/u_mountain_height = 10000.0
shader_parameter/u_top_modulate = Color(1, 1, 1, 1)
shader_parameter/u_block_local_transform = Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
shader_parameter/u_top_albedo_texture = ExtResource("1_clqh5")
shader_parameter/u_top_normal_texture = ExtResource("2_nkmnv")
shader_parameter/u_side_albedo_texture = ExtResource("1_clqh5")
shader_parameter/u_side_normal_texture = ExtResource("2_nkmnv")

[node name="Moon Test" type="Node3D"]

[node name="VoxelLodTerrain" type="VoxelLodTerrain" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.528586, 0.551409, 1.07708)
generator = SubResource("VoxelGeneratorGraph_hxnsk")
mesher = SubResource("VoxelMesherTransvoxel_u8xhy")
material = SubResource("ShaderMaterial_8boqs")
